(function(t){function e(e){for(var s,i,o=e[0],c=e[1],l=e[2],u=0,p=[];u<o.length;u++)i=o[u],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&p.push(a[i][0]),a[i]=0;for(s in c)Object.prototype.hasOwnProperty.call(c,s)&&(t[s]=c[s]);d&&d(e);while(p.length)p.shift()();return r.push.apply(r,l||[]),n()}function n(){for(var t,e=0;e<r.length;e++){for(var n=r[e],s=!0,o=1;o<n.length;o++){var c=n[o];0!==a[c]&&(s=!1)}s&&(r.splice(e--,1),t=i(i.s=n[0]))}return t}var s={},a={app:0},r=[];function i(e){if(s[e])return s[e].exports;var n=s[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=s,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"===typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t["default"]}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/";var o=window["webpackJsonp"]=window["webpackJsonp"]||[],c=o.push.bind(o);o.push=e,o=o.slice();for(var l=0;l<o.length;l++)e(o[l]);var d=c;r.push([2,"chunk-vendors"]),n()})({0:function(t,e){},"034f":function(t,e,n){"use strict";var s=n("85ec"),a=n.n(s);a.a},"0745":function(t){t.exports=JSON.parse('{"id":"FSM#2","target_contract":"Betting","contracts":{"Betting":{"address":"0xa66ee04ef1c1af0046122fb02810e94719f33a62","name":"Betting"}},"actions":{"priceCallback":{"Betting":["priceCallback"]},"setupRace":{"Betting":["setupRace"]},"forceVoidExternal":{"Betting":["forceVoidExternal"]},"refund":{"Betting":["refund"]}},"states":[{"name":"INITIAL","type":"initial","Predicate":"state==0"},{"name":"BET_OPEN","type":"regular","Predicate":"state==1"},{"name":"RACE_START","type":"regular","Predicate":"state==2"},{"name":"RACE_END","type":"regular","Predicate":"state==3"},{"name":"VOIDED_BET","type":"regular","Predicate":"state==4"}],"transitions":[{"from":"INITIAL","to":"BET_OPEN","label":"setupRace","event":"setupRace","action":"setupRace"},{"from":"BET_OPEN","to":"RACE_START","label":"priceCallback","event":"priceCallback","action":"priceCallback"},{"from":"RACE_START","to":"RACE_START","label":"priceCallback","event":"priceCallback","action":"priceCallback"},{"from":"RACE_START","to":"RACE_END","label":"priceCallback","event":"priceCallback","action":"priceCallback"},{"from":"INITIAL","to":"VOIDED_BET","label":"priceCallback","event":"priceCallback","action":"priceCallback"},{"from":"INITIAL","to":"VOIDED_BET","label":"forceVoidExternal","event":"forceVoidExternal","action":"forceVoidExternal"},{"from":"BET_OPEN","to":"VOIDED_BET","label":"forceVoidExternal","event":"forceVoidExternal","action":"forceVoidExternal"},{"from":"RACE_END","to":"VOIDED_BET","label":"forceVoidExternal","event":"forceVoidExternal","action":"forceVoidExternal"},{"from":"BET_OPEN","to":"VOIDED_BET","label":"refund","event":"refund","action":"refund"}]}')},1:function(t,e){},1481:function(t,e,n){"use strict";var s=n("a4a3"),a=n.n(s);a.a},"1c42":function(t,e,n){},2:function(t,e,n){t.exports=n("56d7")},3:function(t,e){},"300d":function(t,e,n){},3916:function(t,e,n){"use strict";var s=n("5b96"),a=n.n(s);a.a},"3dfd":function(t,e,n){"use strict";var s=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"app"}},[n("NavHeader"),n("Tab"),n("BotFooter")],1)},a=[],r=function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},i=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("footer",{attrs:{id:"footer"}},[n("p",{staticClass:"text-center"},[t._v("Â© ModCon 2020, the ultimate smart contract model based testing framework")])])}],o={name:"BotFooter",props:{msg:String}},c=o,l=(n("3916"),n("2877")),d=Object(l["a"])(c,r,i,!1,null,"7963a89c",null),u=d.exports,p=function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},f=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("nav",{staticClass:"navbar navbar-default navbar-fixed-top"},[n("div",{staticClass:"container-fluid"},[n("div",{staticClass:"navbar-header"},[n("a",{staticClass:"navbar-brand",attrs:{href:"#page-top"}},[t._v("ModCon")])]),n("div",{staticClass:"collapse navbar-collapse",attrs:{id:"my-navbar-collapse"}},[n("ul",{staticClass:"nav navbar-nav navbar-right"},[n("li",{staticClass:"hidden"},[n("a",{attrs:{href:"#page-top"}})]),n("li",[n("a",{attrs:{href:"#"}},[t._v("About")])]),n("li",[n("a",{attrs:{href:"#"}},[t._v("Publications")])]),n("li",[n("a",{attrs:{href:"#"}},[t._v("People")])])])])])])}],h={name:"NavHeader",props:{msg:String}},m=h,C=(n("1481"),Object(l["a"])(m,p,f,!1,null,"0ffc577c",null)),_=C.exports,g=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("b-card",[n("b-tabs",{attrs:{card:""},model:{value:t.tabIndex,callback:function(e){t.tabIndex=e},expression:"tabIndex"}},[n("b-tab",{attrs:{title:"network","title-link-class":t.linkClass(0),active:""}},[n("b-form",[n("label",[t._v(" choose blockchain networks")]),n("b-form-select",{staticClass:"mb-3",attrs:{id:"inline-form-custom-select-contract-abi"},on:{change:t.OnSelectnetwork},model:{value:t.network,callback:function(e){t.network=e},expression:"network"}},[n("b-form-select-option",{attrs:{value:null}},[t._v("network")]),n("b-form-select-option",{attrs:{value:"fisco-bcos"}},[t._v("FISCO-BCOS")]),n("b-form-select-option",{attrs:{value:"ethereum"}},[t._v("Ethereum")])],1),t.network?n("span",[t._v("current network: "+t._s(t.network))]):t._e()],1)],1),n("b-tab",{attrs:{title:"HOME","title-link-class":t.linkClass(1),active:""}},[n("Home")],1),n("b-tab",{attrs:{title:"TEST","title-link-class":t.linkClass(2)}},[n("ModelTest")],1)],1)],1)],1)},S=[],x=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"container"},[n("b-card",{staticClass:"mt-3",attrs:{header:"ModCon: The Model-based Testing Platforms for Smart Contract.","header-class":"lg","header-bg-variant":"light","header-text-variant":"default"}},[n("b-form",[n("b-form-group",{attrs:{id:"input-group-1","label-align":"left",label:"Contracts(.sol):","label-for":"input-select-upload",description:"We'll never share your software asset with anyone else."}},[n("b-form-file",{attrs:{id:"input-select-upload",state:Boolean(t.file),accetpt:".sol",placeholder:"Choose smart contract or drop it here...","drop-placeholder":"Drop file here...",multiple:""},on:{change:t.onFileChange},model:{value:t.files,callback:function(e){t.files=e},expression:"files"}})],1),t.status_upload_start?n("b-progress",{attrs:{value:100*t.value/t.files.length,variant:"success"}}):t._e(),n("b-button",{staticClass:" mr-1",attrs:{variant:t.variant_upload,disabled:t.disable_upload},on:{click:t.OnUpload}},[n("b-icon",{attrs:{icon:"cloud-upload",scale:"1","aria-hidden":"true"}}),n("span",[t._v(" Upload ")])],1),n("b-button",{staticClass:"mr-1",attrs:{variant:t.variant_compile,disabled:t.disable_compile},on:{click:t.OnCompile}},[n("span",[t._v("Compile")]),t.status_compile?n("b-icon",{attrs:{icon:"check2"}}):t._e(),t.status_compile_start?n("b-spinner",{attrs:{small:""}}):t._e()],1),t.status_compile?n("b-form",{staticClass:"mt-3",attrs:{inline:""}},[n("label",{staticClass:"mr-sm-2",attrs:{for:"inline-form-custom-select-contract"}},[t._v("contract ")]),n("b-form-select",{staticClass:"mb-2 mr-sm-2 mb-sm-0",attrs:{id:"inline-form-custom-select-contract",options:t.contracts},on:{change:t.OnSelectContract},model:{value:t.selected_contract,callback:function(e){t.selected_contract=e},expression:"selected_contract"}}),t.selected_contract?n("label",{staticClass:"mr-sm-2",attrs:{for:"inline-form-custom-select-contract-address"}},[t._v("address ")]):t._e(),t.selected_contract?n("b-form-select",{staticClass:"mb-2 mr-sm-2 mb-sm-0",attrs:{id:"inline-form-custom-select-contract-address",options:t.contract_addresses},model:{value:t.selected_address,callback:function(e){t.selected_address=e},expression:"selected_address"}}):t._e(),t.selected_contract?n("label",{staticClass:"mr-sm-2",attrs:{for:"inline-form-custom-select-contract-abi"}},[t._v("abi ")]):t._e(),t.selected_contract?n("b-form-select",{staticClass:"mb-2 mr-sm-2 mb-sm-0",attrs:{id:"inline-form-custom-select-contract-abi",options:t.abis},on:{change:t.OnChangeAbi},model:{value:t.selected_abi,callback:function(e){t.selected_abi=e},expression:"selected_abi"}}):t._e()],1):t._e(),t._l(t.selected_abi,(function(e,s){return n("div",{key:s,staticClass:"mt-2"},[n("b-form-group",{attrs:{"label-cols-sm":"3",label:""+s,"label-align-sm":"right","label-for":""+s}},[t.selected_abi?n("b-form-input",{ref:""+s,refInFor:!0,staticClass:"mr-sm-2",attrs:{plaintext:t.readonly(""+s),id:""+s,type:""+e,placeholder:""+e,disabled:t.readonly(""+s)}}):t._e()],1)],1)})),t.status_compile?n("b-button",{staticClass:"mt-2",attrs:{disabled:!t.selected_abi,block:"",variant:"outline-primary"},on:{click:t.OnDeploy}},[t._v(" "+t._s(t.selected_abi?t.selected_abi.name==t.selected_contract.split(".sol")[0]?"Deploy":"SendTx":"Deploy Or SendTransaction"))]):t._e(),n("b-card",{staticClass:"mt-3",attrs:{header:"Result"}},[n("span",{domProps:{innerHTML:t._s(t.log)}})])],2)],1)],1)},v=[];const b="Upload",O="Compile",y="Deploy",T="Transaction",I="Call",A="Upload_client",M="Compile_client",z="Deploy_client",w="Transaction_client",E="Call_client";var B={name:"Home",data:function(){return{object:{title:"How to do lists in Vue",author:"Jane Doe",publishedAt:"2016-04-10",hello:"How to do lists in Vue",world:"Jane Doe",int:"2016-04-10"},selected:[],files:[],status_upload:!1,status_upload_start:!1,value:0,status_compile:!1,status_compile_start:!1,status_deploy:!1,options:[],contracts:[],contract_addresses:[],selected_contract:null,selected_abi:null,selected_address:null,log:"",server_data:null,addresses:{}}},created:function(){console.log("network:",this.network);var t=this;this.$socket.on(O,(function(e){console.log(e),t.status_compile=!0,t.$fsmservice.add_contracts(e),t.server_data||(t.server_data={}),t.server_data[O]=e,t.status_compile=!0,t.status_compile_start=!1})),this.$socket.on(b,(function(e){t.server_data||(t.server_data={}),t.server_data[b]=e})),this.$socket.on(y,(function(e){console.log(y,e),t.status_deploy=!0,t.log+="<br>"+y+": "+e.name+"-"+e.address,t.addresses[e.name]||(t.addresses[""+e.name]=[]),t.addresses[""+e.name].push(""+e.address),console.log("hello world,",t.contract_addresses[0]),"0x"==t.contract_addresses[0].value?t.contract_addresses=[{value:e.address,text:e.address}]:t.contract_addresses.push({value:e.address,text:e.address}),t.server_data||(t.server_data={}),t.server_data[y]=e})),this.$socket.on(T,(function(e){t.log+="<br>"+T+": "+JSON.stringify(e),t.server_data||(t.server_data={}),t.server_data[T]=e})),this.$socket.on(I,(function(e){t.server_data||(t.server_data={}),t.server_data[I]=e})),this.$uploader.addEventListener("complete",(function(e){console.log(e.file.name," has uploaded"),t.status_upload=!0,t.value+=1})),this.$uploader.addEventListener("progress",(function(t){console.log(t,"upload in progress")}))},methods:{onFileChange(t){this.value=0;var e=t.target.files||t.dataTransfer.files;if(e.length){for(var n of(this.selected=[],e))this.selected.push({contract:n.name});this.files=e,this.status_upload=!1,this.status_compile=!1,this.status_deploy=!1,this.status_upload_start=!1,this.status_compile_start=!1}},OnUpload(){this.$socket.emit("client",{type:A,data:this.selected}),this.$uploader.submitFiles(this.files),this.status_upload_start=!0},OnCompile(){for(var t of(this.$socket.emit("client",{type:M,data:this.selected}),this.status_compile_start=!0,this.selected))this.contracts.push({value:t.contract,text:t.contract})},OnDeploy(){if(console.log(E),console.log(w),"0x"===this.selected_address){var t={type:z,data:{contract:this.selected_contract.split(".sol")[0],address:this.selected_address,func:this.selected_abi.name+"("+this.selected_abi.inputs+")",params:JSON.parse("["+this.$refs.inputs[0].localValue+"]"),network:this.$fsmservice.network}};console.log(t),this.$socket.emit("client",t)}else{var e={type:w,data:{contract:this.selected_contract.split(".sol")[0],address:this.selected_address,func:this.selected_abi.name+"("+this.selected_abi.inputs+")",params:JSON.parse("["+this.$refs.inputs[0].localValue+"]"),network:this.$fsmservice.network}};console.log(e),this.$socket.emit("client",e)}},OnSelectContract(t){if(console.log(t),console.log(`address of ${this.selected_contract}:`),console.log(this.addresses),void 0==this.addresses[this.selected_contract.split(".sol")[0]])this.contract_addresses=[{value:"0x",text:"0x"}];else{let t=[];for(let e of this.addresses[this.selected_contract.split(".sol")[0]])t.push({value:e,text:e});this.contract_addresses=t}},OnChangeAbi(){console.log(this.selected_abi),this.labelDeployAndSendTx=this.selected_abi.name==this.selected_contract.split(".sol")[0]?"Deploy":"SendTx",console.log(this.labelDeployAndSendTx)},types(t){let e=[];if(t&&t.length>=1)for(let n of t)e.push(n.type);return e.join()},readonly(t){return!("inputs"===t)}},computed:{variant_upload:function(){return 0==this.status_upload?"primary":"success"},variant_compile:function(){return 0==this.status_upload?"secondary":0==this.status_compile?"primary":"success"},disable_upload:function(){return 0==this.selected.length},disable_compile:function(){return 0==this.status_upload},abis:function(){var t=!1,e=[];for(var n of(console.log(this.server_data[O]),console.log(this.server_data[O][this.selected_contract.split(".sol")[0]]),JSON.parse(JSON.stringify(this.server_data[O][this.selected_contract.split(".sol")[0]]))))"function"!=n.type&&"constructor"!=n.type||("constructor"==n.type&&(t=!0),n.inputs=this.types(n.inputs),n.outputs=this.types(n.outputs),console.log(n),void 0==n.name||null==n.name||""==n.name?(n.name=this.selected_contract.split(".sol")[0],e.push({value:n,text:this.selected_contract.split(".sol")[0]})):e.push({value:n,text:n.name}));0==t&&e.push({value:{name:this.selected_contract.split(".sol")[0],inputs:"",type:"constructor"},text:this.selected_contract.split(".sol")[0]});let s=this;return e.filter(t=>"0x"==s.selected_address?"constructor"==t.value.type:"constructor"!=t.value.type)}},props:{msg:String}},R=B,k=(n("5663"),Object(l["a"])(R,x,v,!1,null,"602b3772",null)),P=k.exports,D=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("b-container",{attrs:{fluid:""}},[n("b-row",[n("b-col",{attrs:{"align-v":"center",cols:"5",md:2}},[n("b-container",[n("b-form",{attrs:{inline:""}},[n("span",{staticClass:"secondary mt-2 mr-2"},[t._v("Specification ")]),n("b-form-group",{staticClass:"mt-2",attrs:{id:"fieldset-1",label:"example:","label-for":"select_example"}},[n("b-form-select",{attrs:{id:"select_example",options:t.options},on:{change:t.OnSelectExample},model:{value:t.selected,callback:function(e){t.selected=e},expression:"selected"}})],1)],1)],1),n("b-container",{class:t.zoom,attrs:{id:"FSMContainer"},on:{mouseover:t.OnMouseOverFSM,mouseleave:t.OnMouseOutFSM}},[n("codemirror",{staticClass:"MyCodeMirror",attrs:{id:"fsm",options:t.cmOptions_json},on:{change:t.OnStateMachineChange},model:{value:t.fsm,callback:function(e){t.fsm=e},expression:"fsm"}})],1)],1),n("b-col",{attrs:{"align-v":"center",cols:"5",md:5}},[n("span",{staticClass:"secondary mt-2 mr-2"},[t._v("Control Panel ")]),n("b-row",{directives:[{name:"show",rawName:"v-show",value:!t.mouseOverFSM,expression:"!mouseOverFSM"}]},[t.fsm?n("div",{staticClass:"container",staticStyle:{width:"100%",height:"350px",border:"solid thin"},domProps:{innerHTML:t._s(t.lSVGInAString)}}):t._e()]),t.lSVGInAString?n("b-row",{directives:[{name:"show",rawName:"v-show",value:!t.mouseOverFSM,expression:"!mouseOverFSM"}]},[n("div",{staticClass:"container",staticStyle:{width:"100%",height:"450px"}},[n("b-row",[n("b-col",[n("b-form-group",{staticClass:"align-baseline text-left",attrs:{label:"Strategy"}},[n("b-form-radio-group",{attrs:{id:"strategy-radio-group",name:"strategy-radios",stacked:""},on:{input:t.OnCoverStrategy},model:{value:t.covering_strategy,callback:function(e){t.covering_strategy=e},expression:"covering_strategy"}},[n("b-form-radio",{staticClass:"text-left mr-3",attrs:{value:"States"}},[t._v("Cover State")]),n("b-form-radio",{staticClass:"text-left mr-5",attrs:{value:"Transitions-Without-Loop"}},[t._v("Cover Transition")]),n("b-form-radio",{staticClass:"text-left mr-5",attrs:{value:"Transitions-With-Loop"}},[t._v("Cover Transition (Loop)")])],1)],1)],1),n("b-col",[n("b-form-group",{staticClass:"text-left",attrs:{label:"Test Case Priority on State/Transition"}},[n("b-form",{staticClass:"mt-2 mb-2",attrs:{inline:""}},[n("label",{staticClass:"mr-sm-2",attrs:{for:"inline-form-custom-select-state"}},[t._v("State: ")]),n("b-form-select",{staticClass:"mb-2 mr-sm-2 mb-sm-0 col-sm-2",attrs:{id:"inline-form-custom-select-state",options:t.states},model:{value:t.selected_state,callback:function(e){t.selected_state=e},expression:"selected_state"}})],1),n("b-form",{staticClass:"mt-2 mb-2",attrs:{inline:""}},[n("label",{staticClass:"mr-sm-2"},[t._v("Transition: ")]),n("b-form-select",{staticClass:"mb-2 mr-sm-2 mb-sm-0 col-sm-2",attrs:{options:t.states},on:{change:t.OnTransitions},model:{value:t.selected_transition_startstate,callback:function(e){t.selected_transition_startstate=e},expression:"selected_transition_startstate"}}),n("span",[t._v(" --\x3e ")]),n("b-form-select",{staticClass:"mb-2 mr-sm-2 mb-sm-0  col-sm-2",attrs:{options:t.transitions},model:{value:t.selected_transition,callback:function(e){t.selected_transition=e},expression:"selected_transition"}})],1)],1)],1)],1),n("b-form",{attrs:{inline:""}},[n("b-form-checkbox",{staticClass:"mr-3 mb-2",attrs:{id:"checkbox-1",name:"checkbox-1",value:"confirmed","unchecked-value":"not_confirmed"},model:{value:t.fsm_status,callback:function(e){t.fsm_status=e},expression:"fsm_status"}},[t._v(" Confirm specication ")]),n("b-form-checkbox",{staticClass:"mr-3 mb-2",attrs:{id:"checkbox-2",name:"checkbox-2",value:"confirmed","unchecked-value":"not_confirmed"},model:{value:t.model_status,callback:function(e){t.model_status=e},expression:"model_status"}},[t._v(" Confirm model driver ")]),n("b-form-checkbox",{staticClass:"mr-3 mb-2",attrs:{name:"check-button",switch:""},on:{input:t.OnChooseRandomTest},model:{value:t.chooseRandom,callback:function(e){t.chooseRandom=e},expression:"chooseRandom"}},[n("span",[t._v(t._s(t.chooseRandom?"Random":"Model Based"))])]),n("b-button",{staticClass:"ml-2   mb-2 col-sm-2",attrs:{disabled:t.disableTest,size:"md",variant:t.variantTest},on:{click:t.OnTest}},[n("span",[t._v(t._s(t.isTestStart?"Stop":"Test"))]),t.status_stop_start&&t.isTestStart?n("b-spinner",{attrs:{small:""}}):t._e()],1),t.test_results.length>0?n("download-csv",{attrs:{data:t.test_results}},[n("b-button",{staticClass:"ml-2   mb-2 ",attrs:{size:"md",variant:"secondary"}},[n("b-icon",{attrs:{icon:"download","aria-hidden":"true"}}),t._v(" (.csv) ")],1)],1):t._e(),t.test_results.length>0?n("b-button",{staticClass:"ml-2   mb-2 ",attrs:{size:"md",variant:"secondary"},on:{click:t.OnClearTable}},[t._v(" clear ")]):t._e()],1),n("b-table",{attrs:{outlined:"true","sticky-header":"true",hover:"",items:t.test_results}})],1)]):t._e()],1),n("b-col",{attrs:{cols:"6",md:"5"}},[n("span",{staticClass:"secondary mt-2 mr-2"},[t._v(" Model Driver ")]),n("b-container",{staticClass:"normal"},[n("codemirror",{staticClass:"ModelCodeMirror",attrs:{options:t.cmOptions},model:{value:t.model,callback:function(e){t.model=e},expression:"model"}})],1)],1)],1)],1)},$=[],N=n("a7ef"),F=n.n(N),U=n("6582"),L=n.n(U),j=(n("a7be"),n("7a7a"),n("8c06"),n("693d"),n("31c5"),n("9948"),n("b933"),n("9c7b"),n("715d"),n("23de"),n("4ba6"),n("8c33"),n("7289"),n("2aed"),n("d72f"),n("0b6c"),n("9a48"),n("697e"),n("aedd"),n("164b"),n("4895"),n("cbc8"),n("8d70"),n("9f09"),n("a2c1"),n("e2d8")),X=n("5638"),V=n("5a65"),J=n("0745"),G=n("d008");const q=50;var H=0,W={name:"ModelTest",data:function(){return{fsm:null,status_fsm:!1,status_fsm_change:!1,selected:null,fsm_status:"not_confirmed",model_status:"not_confirmed",chooseRandom:!1,lSVGInAString:null,mouseOverFSM:!1,status_test:!1,status_randomtest:!1,covering_strategy:null,disabledTest:!1,disabledRandomTest:!1,textTestButton:"Test",textRandomTestButton:"Random Test",status_stop_start:!1,isTestStart:!1,states:[{value:"null",text:"null"}],selected_state:null,selected_transition_startstate:null,transitions:null,selected_transition:null,log:"<p>this is the place to show running log </p>"+this.$smcat,test_results:[],test_priority:{},options:[{value:j,text:"credit"},{value:J,text:"betting"},{value:X,text:"blindAction"},{value:G,text:"assetTransfer"},{value:V,text:"stateMachine"},{value:"Write your specication here",text:"empty"}],cmOptions_json:{mode:{name:"javascript",json:!0,statementIndent:2},viewportMargin:1/0,tabSize:4,styleActiveLine:!0,lineNumbers:!0,line:!0,foldGutter:!0,styleSelectedText:!0,keyMap:"sublime",matchBrackets:!0,showCursorWhenSelecting:!0,theme:"default",extraKeys:{Ctrl:"autocomplete"},hintOptions:{completeSingle:!1}},cmOptions:{mode:"text/javascript",viewportMargin:1/0,tabSize:4,styleActiveLine:!0,lineNumbers:!0,line:!0,foldGutter:!0,styleSelectedText:!0,keyMap:"sublime",matchBrackets:!0,showCursorWhenSelecting:!0,theme:"default",extraKeys:{Ctrl:"autocomplete"},hintOptions:{completeSingle:!1}}}},created:function(){let t=this;const e="Test";this.$socket.on(e,t=>{console.log(e,t)}),this.$socket.on("server",e=>{if(console.log(JSON.stringify(e)),"event_Test_Done"==e.event)return t.status_test=!0,void console.log(e);"RandomTestAction_Report"==e.event&&console.log(e.event);const n=t.$smcat.render(t.$fsmservice.add_action_report(e.data).get_sm_cat(),{inputType:"json",outputType:"svg",direction:"left-right"});var s=t.$fsmservice.next_result();s&&t.test_results.push(s);var a=new DOMParser,r=a.parseFromString(n,"text/xml");r.getElementsByTagName("svg")[0].setAttribute("width","100%"),r.getElementsByTagName("svg")[0].setAttribute("height","100%");var i=new XMLSerializer;t.lSVGInAString=i.serializeToString(r)}),this.$socket.on("server-stop",e=>{console.log("server stopped:",e),t.status_stop_start=!1,t.isTestStart=!1,t.chooseRandom&&(H++,H<q&&(console.log("next random test..."),console.log("next random test done.")))})},methods:{GenerateSVGXMLString(t){const e=this.$smcat.render(t,{inputType:"json",outputType:"svg",direction:"left-right"});var n=new DOMParser,s=n.parseFromString(e,"text/xml");s.getElementsByTagName("svg")[0].setAttribute("width","100%"),s.getElementsByTagName("svg")[0].setAttribute("height","100%");var a=new XMLSerializer;this.lSVGInAString=a.serializeToString(s)},OnSelectExample(){if("null"!=this.selected){this.fsm=L()(this.selected);try{this.GenerateSVGXMLString(this.$fsmservice.add_fsm(this.fsm).get_sm_cat()),this.states=this.$fsmservice.get_stateOptions(),this.status_fsm=!0,this.model=F()(""+this.$fsmservice.get_model_script()),console.log(this.model)}catch(t){-1!=t.toString().indexOf("abi")&&alert("The application has not been deployed before."),console.error(t)}}else this.fsm=null,this.model=null},OnStateMachineChange(){if(this.fsm){console.log("OnStateMachineChange");try{this.GenerateSVGXMLString(this.$fsmservice.add_fsm(this.fsm).get_sm_cat()),this.states=this.$fsmservice.get_stateOptions(),this.status_fsm=!0,this.model=F()(this.$fsmservice.get_model_script()),this.status_test=!1}catch(t){console.error(t),-1!=t.toString().indexOf("abi")&&alert("The application has not been deployed before.")}}},OnLearn(){const t="Learn_client";console.log(t),this.$socket.emit("client",{type:t,data:{target_contract:this.$fsmservice.get_fsm().target_contract,network:this.$fsmservice.network}})},OnTest(){if(this.chooseRandom)this.OnRandomTest();else if(this.isTestStart)this.status_stop_start=!0,this.$socket.emit("client-stop",{command:"stop testing!"});else{const t="Test_client";console.log(t),this.$fsmservice.disable_randomTest(),this.$socket.emit("client",{type:t,data:{covering_strategy:this.covering_strategy,test_priority:{state:this.selected_state,transition:this.selected_transition},target_contract:this.$fsmservice.get_fsm().target_contract,file_name:"statemachine.js",model_script:this.model,network:this.$fsmservice.network}}),this.isTestStart=!0}},OnRandomTest(){if(this.chooseRandom)if(this.isTestStart)this.status_stop_start=!0,this.$socket.emit("client-stop",{command:"stop testing!"});else{const t="Test_client";console.log(t),this.$fsmservice.enable_randomTest(),this.$socket.emit("client",{type:t,data:{random_test:!0,covering_strategy:this.covering_strategy,test_priority:{state:this.selected_state,transition:this.selected_transition},target_contract:this.$fsmservice.get_fsm().target_contract,file_name:"statemachine.js",model_script:this.model,network:this.$fsmservice.network}}),this.isTestStart=!0,setTimeout(this.OnTest,18e5)}},OnClearTable(){this.test_results=[]},OnMouseOverFSM(){console.log("MouseOverFSM"),this.mouseOverFSM=!0},OnMouseOutFSM(){console.log("MouseLeaveFSM"),this.mouseOverFSM=!1,this.isTestStart||this.OnStateMachineChange()},OnCoverStrategy(){console.log("current strategy "+this.covering_strategy),this.model=this.$fsmservice.add_covering_strategy(this.covering_strategy).get_model_script(),this.GenerateSVGXMLString(this.$fsmservice.get_sm_cat())},OnTransitions(){console.log(this.selected_transition_startstate),this.transitions=this.$fsmservice.get_possible_transitions(this.selected_transition_startstate)},OnChooseRandomTest(){console.log(this.chooseRandom),console.log("current testing is "+(this.chooseRandom?"Random Testing":"Model Based Testing")),this.chooseRandom?this.model=this.$fsmservice.enable_randomTest().get_model_script():this.model=this.$fsmservice.disable_randomTest().get_model_script(),this.GenerateSVGXMLString(this.$fsmservice.get_sm_cat())}},computed:{disable_model_script(){return 0==this.status_fsm},zoom(){return console.log(this.mouseOverFSM?"large stack-top":"normal stack-top"),this.mouseOverFSM?"large stack-top":"normal stack-top"},disableTest(){return console.log(this.fsm_status,this.model_status),!("confirmed"==this.fsm_status&&"confirmed"==this.model_status)},variantTest(){return"confirmed"==this.fsm_status&&"confirmed"==this.model_status?this.status_test?"success":"primary":"secondary"},variantRandomTest(){return"confirmed"==this.fsm_status&&"confirmed"==this.model_status?this.status_randomtest?"success":"primary":"secondary"}},props:{msg:String}},K=W,Q=(n("772e"),Object(l["a"])(K,D,$,!1,null,null,null)),Y=Q.exports,Z={name:"Tab",components:{Home:P,ModelTest:Y},data(){return{tabIndex:1,network:null}},created:function(){this.$socket.on("customEmit",(function(t){console.log(t)}))},methods:{linkClass(t){return this.tabIndex===t?["bg-primary","text-light"]:["bg-light","text-info"]},OnSelectnetwork(){this.$fsmservice.network=this.network,console.log(this.$fsmservice)}}},tt=Z,et=(n("faa6"),Object(l["a"])(tt,g,S,!1,null,"4921f092",null)),nt=et.exports,st={name:"App",components:{BotFooter:u,NavHeader:_,Tab:nt}},at=st,rt=(n("034f"),Object(l["a"])(at,s,a,!1,null,null,null));e["a"]=rt.exports},4:function(t,e){},4090:function(t,e,n){},5638:function(t){t.exports=JSON.parse('{"id":"FSM#2","target_contract":"BlindAuction","contracts":{"BlindAuction":{"address":"0xe438d331444aa190ca8f8a85f85339b3b1e9a0db","name":"BlindAuction"}},"actions":{"bid":{"BlindAuction":["bid"]},"unbid":{"BlindAuction":["unbid"]},"close":{"BlindAuction":["close"]},"reveal":{"BlindAuction":["reveal"]},"finish":{"BlindAuction":["finish"]},"withdraw":{"BlindAuction":["withdraw"]},"cancelRB":{"BlindAuction":["cancelRB"]},"cancelABB":{"BlindAuction":["cancelABB"]}},"states":[{"name":"initial","type":"initial","Predicate":"state==0"},{"name":"ABB","type":"regular","Predicate":"state==1"},{"name":"RB","type":"regular","Predicate":"state==2"},{"name":"F","type":"regular","Predicate":"state==3"},{"name":"C","type":"regular","Predicate":"state==4"}],"transitions":[{"from":"initial","to":"ABB","label":"bid","event":"bid","action":"bid"},{"from":"ABB","to":"ABB","label":"bid","event":"bid","action":"bid"},{"from":"ABB","to":"C","label":"cancelABB","event":"cancelABB","action":"cancelABB"},{"from":"ABB","to":"RB","label":"close","event":"close","action":"close"},{"from":"RB","to":"RB","label":"reveal","event":"reveal","action":"reveal"},{"from":"RB","to":"F","label":"finish","event":"finish","action":"finish"},{"from":"RB","to":"C","label":"cancelRB","event":"cancelRB","action":"cancelRB"},{"from":"C","to":"C","label":"unbid","event":"unbid","action":"unbid"},{"from":"F","to":"F","label":"withdraw","event":"withdraw","action":"withdraw"}]}')},5663:function(t,e,n){"use strict";var s=n("4090"),a=n.n(s);a.a},"56d7":function(t,e,n){"use strict";n.r(e),function(t){var e=n("2b0e"),s=n("3dfd"),a=n("4f0f"),r=n.n(a),i=n("5f5b"),o=n("b1e0"),c=n("f0bd"),l=n("8055"),d=n.n(l),u=n("9bcd"),p=n.n(u),f=n("67cf"),h=n("8f94"),m=n.n(h),C=n("2347"),_=n.n(C);const g=new f["a"];c["a"].Defaults.modifiers.computeStyle.gpuAcceleration=!1,t.Popper=c["a"],t.vm=v;var S=d()("http://localhost:3000/",{reconnection:!0,reconnectionDelay:3e3}),x=new p.a(S);e["default"].prototype.$fsmservice=g,e["default"].prototype.$uploader=x,e["default"].prototype.$socket=S,e["default"].prototype.$smcat=r.a,e["default"].component("downloadCsv",_.a),e["default"].use(m.a),e["default"].use(i["a"]),e["default"].use(o["a"]),e["default"].config.productionTip=!1;var v=new e["default"]({render:t=>t(s["a"])}).$mount("#app")}.call(this,n("c8ba"))},"5a65":function(t){t.exports=JSON.parse('{"id":"FSM#2","target_contract":"StateMachine","contracts":{"StateMachine":{"address":"0x00","name":"StateMachine"}},"actions":{"initiate":{"StateMachine":["initiate"]},"approve":{"StateMachine":["approve"]},"receive":{"StateMachine":["receive"]},"finish":{"StateMachine":["finish"]}},"states":[{"name":"Applied","type":"initial","Predicate":"state==0"},{"name":"Initiated","type":"regular","Predicate":"state==1"},{"name":"Approved","type":"regular","Predicate":"state==2"},{"name":"Received","type":"regular","Predicate":"state==3"},{"name":"Finished","type":"regular","Predicate":"state==4"}],"transitions":[{"from":"Applied","to":"Initiated","label":"initiate","event":"initiate","action":"initiate"},{"from":"Initiated","to":"Approved","label":"approve","event":"approve","action":"approve"},{"from":"Approved","to":"Received","label":"receive","event":"receive","action":"receive"},{"from":"Received","to":"Finished","label":"finish","event":"finish","action":"finish"}]}')},"5b96":function(t,e,n){},"67cf":function(t,e,n){"use strict";n.d(e,"a",(function(){return p}));var s=n("f654"),a=n.n(s);const r="States",i="Transitions-Without-Loop",o="Transitions-With-Loop",c=0,l='const assert = require("assert");\nconst hex2ascii = require(\'hex2ascii\')\nconst Machine = require("xstate").Machine;\nconst createModel = require("@xstate/test").createModel;\nconst  EXPIRE_CREDIT = 400;\nconst  CLEAR_CREDIT = 500;\nconst  CLOSE_CREDIT = 600;\nlet asyncFlag = false;\nconst MAX_COUNT = 60;\n\nfunction revertAsyncFlag() {\nasyncFlag = !asyncFlag;\n}\n\n\n// contract interface \n\nclass CreditController {\nconstructor(fuzzer) {\n  this.address = "0xa7b692824ac1ff30f01c325ec7498005ee13e0bc";\n  this.name = "CreditController";\n  this.fuzzer = fuzzer;\n}\n\nasync getCreditAddressByCreditNo() {\n  let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "getCreditAddressByCreditNo");\n  return fuzz;\n}\n\nasync transferAndDiscountCheck() {\n  let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "transferAndDiscountCheck");\n  return fuzz;\n}\n\nasync transferCredit() {\n  let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "transferCredit");\n  return fuzz;\n}\n\nasync staticArrayToDynamicArray() {\n  let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "staticArrayToDynamicArray");\n  return fuzz;\n}\n\nasync accountIsOk() {\n  let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "accountIsOk");\n  return fuzz;\n}\n\nasync expireOrClearOrCloseCredit(option) {\n  let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "expireOrClearOrCloseCredit", option);\n  return fuzz;\n}\n\nasync discountCredit() {\n  let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "discountCredit");\n  return fuzz;\n}\n\nasync state() {\n  let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "state");\n  return fuzz;\n}\n\nasync createCredit() {\n  let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "createCredit");\n  return fuzz;\n}\n\n}\n// state machine context\nclass StateMachineCtx {\nconstructor(fsmreplayer, fuzzer) {\n  this.CreditController = new CreditController(fuzzer);\n\n  this.state = {\n    "id": "FSM#1"\n  };\n  this.fuzzer = fuzzer;\n  this.fsmreplayer = fsmreplayer;\n}\nasync initialize() {\n  this.CreditController.address = await this.fsmreplayer.initialize();\n}\nstatic getInstance(fsmreplayer, fuzzer) {\n  if (!StateMachineCtx.instance)\n    StateMachineCtx.instance = new StateMachineCtx(fsmreplayer, fuzzer);\n  return StateMachineCtx.instance;\n}\nasync getState() {\n  //TO DO, set what your state means and how to get the state\n  if (this.CreditController.state) {\n    let ret = await this.CreditController.state();\n    this.state = BigInt(ret.receipt.result.output.toString());\n  } else if (this.CreditController.stage) {\n    let ret = await this.CreditController.stage();\n    this.state = BigInt(ret.receipt.result.output.toString());\n  } else {\n    this.state = null;\n  }\n  console.log("state:", this.state);\n  return this.state;\n}\n// action_functions_mapping\nasync action_create() {\n  let ret = [];\n  if (asyncFlag) {\n    // bcos passed status:0\n    let executeStatus = BigInt(0);\n    let ctx = StateMachineCtx.getInstance();\n    let count = 0;\n    // PreCondition. \n    let preState = await ctx.getState();\n    assert(null == preState || preState == 0, "preCondition violated: current state is " + preState);\n\n    let retcreateCredit = await StateMachineCtx.getInstance().CreditController.createCredit();\n    ret.push(retcreateCredit);\n    console.log("current test case: ", BigInt(retcreateCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n    executeStatus += BigInt(retcreateCredit.receipt.status.toString());\n    while (executeStatus != 0 && count < MAX_COUNT) {\n      count++;\n      executeStatus = BigInt(0);\n      let retcreateCredit = await StateMachineCtx.getInstance().CreditController.createCredit();\n      ret.push(retcreateCredit);\n      console.log("current test case: ", BigInt(retcreateCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n      executeStatus += BigInt(retcreateCredit.receipt.status.toString());\n    }\n\n    if (count >= MAX_COUNT) {\n      throw "TIMEOUT,  too many failed test cases!";\n    }\n    let postState = await ctx.getState();\n    assert(null == postState || postState == 1, "postCondition violated: current state is " + postState);\n    // PostCondition. \n  }\n  return ret;\n}\nasync action_discount() {\n  let ret = [];\n  if (asyncFlag) {\n    // bcos passed status:0\n    let executeStatus = BigInt(0);\n    let ctx = StateMachineCtx.getInstance();\n    let count = 0;\n    // PreCondition. \n    let preState = await ctx.getState();\n    assert(null == preState || preState == 1, "preCondition violated: current state is " + preState);\n\n    let retdiscountCredit = await StateMachineCtx.getInstance().CreditController.discountCredit();\n    ret.push(retdiscountCredit);\n    console.log("current test case: ", BigInt(retdiscountCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n    executeStatus += BigInt(retdiscountCredit.receipt.status.toString());\n    while (executeStatus != 0 && count < MAX_COUNT) {\n      count++;\n      executeStatus = BigInt(0);\n      let retdiscountCredit = await StateMachineCtx.getInstance().CreditController.discountCredit();\n      ret.push(retdiscountCredit);\n      console.log("current test case: ", BigInt(retdiscountCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n      executeStatus += BigInt(retdiscountCredit.receipt.status.toString());\n    }\n\n    if (count >= MAX_COUNT) {\n      throw "TIMEOUT,  too many failed test cases!";\n    }\n    let postState = await ctx.getState();\n    assert(null == postState || postState == 2, "postCondition violated: current state is " + postState);\n    // PostCondition. \n  }\n  return ret;\n}\nasync action_transfer() {\n  let ret = [];\n  if (asyncFlag) {\n    // bcos passed status:0\n    let executeStatus = BigInt(0);\n    let ctx = StateMachineCtx.getInstance();\n    let count = 0;\n    // PreCondition. \n    let preState = await ctx.getState();\n    assert(null == preState || preState == 1, "preCondition violated: current state is " + preState);\n\n    let rettransferCredit = await StateMachineCtx.getInstance().CreditController.transferCredit();\n    ret.push(rettransferCredit);\n    console.log("current test case: ", BigInt(rettransferCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n    executeStatus += BigInt(rettransferCredit.receipt.status.toString());\n    while (executeStatus != 0 && count < MAX_COUNT) {\n      count++;\n      executeStatus = BigInt(0);\n      let rettransferCredit = await StateMachineCtx.getInstance().CreditController.transferCredit();\n      ret.push(rettransferCredit);\n      console.log("current test case: ", BigInt(rettransferCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n      executeStatus += BigInt(rettransferCredit.receipt.status.toString());\n    }\n\n    if (count >= MAX_COUNT) {\n      throw "TIMEOUT,  too many failed test cases!";\n    }\n    let postState = await ctx.getState();\n    assert(null == postState || postState == 1, "postCondition violated: current state is " + postState);\n    // PostCondition. \n  }\n  return ret;\n}\nasync action_expire() {\n  let ret = [];\n  if (asyncFlag) {\n    // bcos passed status:0\n    let executeStatus = BigInt(0);\n    let ctx = StateMachineCtx.getInstance();\n    let count = 0;\n    // PreCondition. \n    let preState = await ctx.getState();\n    assert(null == preState || preState == 1 || preState == 2, "preCondition violated: current state is " + preState);\n\n    let retexpireOrClearOrCloseCredit = await StateMachineCtx.getInstance().CreditController.expireOrClearOrCloseCredit({static:[{index:3, value:EXPIRE_CREDIT}]});\n    ret.push(retexpireOrClearOrCloseCredit);\n    console.log("current test case: ", BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n    executeStatus += BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString());\n    while (executeStatus != 0 && count < MAX_COUNT) {\n      count++;\n      executeStatus = BigInt(0);\n      let retexpireOrClearOrCloseCredit = await StateMachineCtx.getInstance().CreditController.expireOrClearOrCloseCredit({static:[{index:3, value:EXPIRE_CREDIT}]});\n      ret.push(retexpireOrClearOrCloseCredit);\n      console.log("current test case: ", BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n      executeStatus += BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString());\n    }\n\n    if (count >= MAX_COUNT) {\n      throw "TIMEOUT,  too many failed test cases!";\n    }\n    let postState = await ctx.getState();\n    assert(null == postState || postState == 3 || postState == 3, "postCondition violated: current state is " + postState);\n    // PostCondition. \n  }\n  return ret;\n}\nasync action_close() {\n  let ret = [];\n  if (asyncFlag) {\n    // bcos passed status:0\n    let executeStatus = BigInt(0);\n    let ctx = StateMachineCtx.getInstance();\n    let count = 0;\n    // PreCondition. \n    let preState = await ctx.getState();\n    assert(null == preState || preState == 1 || preState == 2, "preCondition violated: current state is " + preState);\n\n    let retexpireOrClearOrCloseCredit = await StateMachineCtx.getInstance().CreditController.expireOrClearOrCloseCredit({static:[{index:3, value:CLOSE_CREDIT}]});\n    ret.push(retexpireOrClearOrCloseCredit);\n    console.log("current test case: ", BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n    executeStatus += BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString());\n    while (executeStatus != 0 && count < MAX_COUNT) {\n      count++;\n      executeStatus = BigInt(0);\n      let retexpireOrClearOrCloseCredit = await StateMachineCtx.getInstance().CreditController.expireOrClearOrCloseCredit({static:[{index:3, value:CLOSE_CREDIT}]});\n      ret.push(retexpireOrClearOrCloseCredit);\n      console.log("current test case: ", BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n      executeStatus += BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString());\n    }\n\n    if (count >= MAX_COUNT) {\n      throw "TIMEOUT,  too many failed test cases!";\n    }\n    let postState = await ctx.getState();\n    assert(null == postState || postState == 5 || postState == 5, "postCondition violated: current state is " + postState);\n    // PostCondition. \n  }\n  return ret;\n}\nasync action_clear() {\n  let ret = [];\n  if (asyncFlag) {\n    // bcos passed status:0\n    let executeStatus = BigInt(0);\n    let ctx = StateMachineCtx.getInstance();\n    let count = 0;\n    // PreCondition. \n    let preState = await ctx.getState();\n    assert(null == preState || preState == 1 || preState == 2, "preCondition violated: current state is " + preState);\n\n    let retexpireOrClearOrCloseCredit = await StateMachineCtx.getInstance().CreditController.expireOrClearOrCloseCredit({static:[{index:3, value:CLEAR_CREDIT}]});\n    ret.push(retexpireOrClearOrCloseCredit);\n    console.log("current test case: ", BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n    executeStatus += BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString());\n    while (executeStatus != 0 && count < MAX_COUNT) {\n      count++;\n      executeStatus = BigInt(0);\n      let retexpireOrClearOrCloseCredit = await StateMachineCtx.getInstance().CreditController.expireOrClearOrCloseCredit({static:[{index:3, value:CLEAR_CREDIT}]});\n      ret.push(retexpireOrClearOrCloseCredit);\n      console.log("current test case: ", BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n      executeStatus += BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString());\n    }\n\n    if (count >= MAX_COUNT) {\n      throw "TIMEOUT,  too many failed test cases!";\n    }\n    let postState = await ctx.getState();\n    assert(null == postState || postState == 4 || postState == 4, "postCondition violated: current state is " + postState);\n    // PostCondition. \n  }\n  return ret;\n}\n}\n// state machine \nconst createStateMachine = statectx => {\nreturn Machine({\n  id: "FSM#1",\n  initial: "initial",\n  context: {\n    ctx: statectx\n  },\n  states: {\n\n    initial: {\n      on: {\n        create: {\n          target: "CREATED",\n          actions: "action_create"\n        }\n      }\n    },\n    CREATED: {\n      on: {\n        transfer: {\n          target: "CREATED",\n          actions: "action_transfer"\n        },\n        discount: {\n          target: "DISCOUNTED",\n          actions: "action_discount"\n        },\n        expire: {\n          target: "EXPIRED",\n          actions: "action_expire"\n        },\n        clear: {\n          target: "CLEARED",\n          actions: "action_clear"\n        },\n        close: {\n          target: "CLOSED",\n          actions: "action_close"\n        }\n      }\n    },\n    DISCOUNTED: {\n      on: {\n        expire: {\n          target: "EXPIRED",\n          actions: "action_expire"\n        },\n        clear: {\n          target: "CLEARED",\n          actions: "action_clear"\n        },\n        close: {\n          target: "CLOSED",\n          actions: "action_close"\n        }\n      }\n    },\n    EXPIRED: {\n      type: "final"\n    },\n    CLEARED: {\n      type: "final"\n    },\n    CLOSED: {\n      type: "final"\n    }\n  }\n}, {\n  actions: {\n    action_create: statectx.action_create,\n    action_discount: statectx.action_discount,\n    action_transfer: statectx.action_transfer,\n    action_expire: statectx.action_expire,\n    action_close: statectx.action_close,\n    action_clear: statectx.action_clear\n  }\n});\n}\n\nmodule.exports.StateMachineCtx = StateMachineCtx\nmodule.exports.revertAsyncFlag = revertAsyncFlag;\nmodule.exports.createStateMachine = createStateMachine',d='const assert = require("assert");\nconst hex2ascii = require(\'hex2ascii\')\nconst Machine = require("xstate").Machine;\nconst createModel = require("@xstate/test").createModel;\nconst  EXPIRE_CREDIT = 400;\nconst  CLEAR_CREDIT = 500;\nconst  CLOSE_CREDIT = 600;\nlet asyncFlag = false;\nconst MAX_COUNT = 60;\n\nfunction revertAsyncFlag() {\n  asyncFlag = !asyncFlag;\n}\n\n\n// contract interface \n\nclass CreditController {\n  constructor(fuzzer) {\n    this.address = "0xa7b692824ac1ff30f01c325ec7498005ee13e0bc";\n    this.name = "CreditController";\n    this.fuzzer = fuzzer;\n  }\n\n  async getCreditAddressByCreditNo() {\n    let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "getCreditAddressByCreditNo");\n    return fuzz;\n  }\n\n  async transferAndDiscountCheck() {\n    let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "transferAndDiscountCheck");\n    return fuzz;\n  }\n\n  async transferCredit() {\n    let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "transferCredit");\n    return fuzz;\n  }\n\n  async staticArrayToDynamicArray() {\n    let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "staticArrayToDynamicArray");\n    return fuzz;\n  }\n\n  async accountIsOk() {\n    let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "accountIsOk");\n    return fuzz;\n  }\n\n\n  async expireOrClearOrCloseCredit(option) {\n    let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "expireOrClearOrCloseCredit", option);\n    return fuzz;\n  }\n\n  async discountCredit() {\n    let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "discountCredit");\n    return fuzz;\n  }\n\n  async state() {\n    let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "state");\n    return fuzz;\n  }\n\n  async createCredit() {\n    let fuzz = await this.fuzzer.full_fuzz_fun("CreditController", this.address, "createCredit");\n    return fuzz;\n  }\n\n}\n// state machine context\nclass StateMachineCtx {\n  constructor(fsmreplayer, fuzzer) {\n    this.CreditController = new CreditController(fuzzer);\n\n    this.state = {\n      "id": "FSM#1"\n    };\n    this.fuzzer = fuzzer;\n    this.fsmreplayer = fsmreplayer;\n  }\n  async initialize() {\n    this.CreditController.address = await this.fsmreplayer.initialize();\n  }\n  static getInstance(fsmreplayer, fuzzer) {\n    if (!StateMachineCtx.instance)\n      StateMachineCtx.instance = new StateMachineCtx(fsmreplayer, fuzzer);\n    return StateMachineCtx.instance;\n  }\n  async getState() {\n    //TO DO, set what your state means and how to get the state\n    if (this.CreditController.state) {\n      let ret = await this.CreditController.state();\n      this.state = BigInt(ret.receipt.result.output.toString());\n    } else if (this.CreditController.stage) {\n      let ret = await this.CreditController.stage();\n      this.state = BigInt(ret.receipt.result.output.toString());\n    } else {\n      this.state = null;\n    }\n    console.log("state:", this.state);\n    return this.state;\n  }\n  // action_functions_mapping\n  async action_create() {\n    let ret = [];\n    if (asyncFlag) {\n      // bcos passed status:0\n      let executeStatus = BigInt(0);\n      let ctx = StateMachineCtx.getInstance();\n      let count = 0;\n      // PreCondition. \n      let preState = await ctx.getState();\n      assert(null == preState || preState == 0, "preCondition violated: current state is " + preState);\n\n      let retcreateCredit = await StateMachineCtx.getInstance().CreditController.createCredit();\n      ret.push(retcreateCredit);\n      console.log("current test case: ", BigInt(retcreateCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n      executeStatus += BigInt(retcreateCredit.receipt.status.toString());\n      while (executeStatus != 0 && count < MAX_COUNT) {\n        count++;\n        executeStatus = BigInt(0);\n        let retcreateCredit = await StateMachineCtx.getInstance().CreditController.createCredit();\n        ret.push(retcreateCredit);\n        console.log("current test case: ", BigInt(retcreateCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n        executeStatus += BigInt(retcreateCredit.receipt.status.toString());\n      }\n\n      if (count >= MAX_COUNT) {\n        throw "TIMEOUT,  too many failed test cases!";\n      }\n      let postState = await ctx.getState();\n      assert(null == postState || postState == 1, "postCondition violated: current state is " + postState);\n      // PostCondition. \n    }\n    return ret;\n  }\n  async action_discount() {\n    let ret = [];\n    if (asyncFlag) {\n      // bcos passed status:0\n      let executeStatus = BigInt(0);\n      let ctx = StateMachineCtx.getInstance();\n      let count = 0;\n      // PreCondition. \n      let preState = await ctx.getState();\n      assert(null == preState || preState == 1, "preCondition violated: current state is " + preState);\n\n      let retdiscountCredit = await StateMachineCtx.getInstance().CreditController.discountCredit();\n      ret.push(retdiscountCredit);\n      console.log("current test case: ", BigInt(retdiscountCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n      executeStatus += BigInt(retdiscountCredit.receipt.status.toString());\n      while (executeStatus != 0 && count < MAX_COUNT) {\n        count++;\n        executeStatus = BigInt(0);\n        let retdiscountCredit = await StateMachineCtx.getInstance().CreditController.discountCredit();\n        ret.push(retdiscountCredit);\n        console.log("current test case: ", BigInt(retdiscountCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n        executeStatus += BigInt(retdiscountCredit.receipt.status.toString());\n      }\n\n      if (count >= MAX_COUNT) {\n        throw "TIMEOUT,  too many failed test cases!";\n      }\n      let postState = await ctx.getState();\n      assert(null == postState || postState == 2, "postCondition violated: current state is " + postState);\n      // PostCondition. \n    }\n    return ret;\n  }\n  async action_transfer() {\n    let ret = [];\n    if (asyncFlag) {\n      // bcos passed status:0\n      let executeStatus = BigInt(0);\n      let ctx = StateMachineCtx.getInstance();\n      let count = 0;\n      // PreCondition. \n      let preState = await ctx.getState();\n      assert(null == preState || preState == 1, "preCondition violated: current state is " + preState);\n\n      let rettransferCredit = await StateMachineCtx.getInstance().CreditController.transferCredit();\n      ret.push(rettransferCredit);\n      console.log("current test case: ", BigInt(rettransferCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n      executeStatus += BigInt(rettransferCredit.receipt.status.toString());\n      while (executeStatus != 0 && count < MAX_COUNT) {\n        count++;\n        executeStatus = BigInt(0);\n        let rettransferCredit = await StateMachineCtx.getInstance().CreditController.transferCredit();\n        ret.push(rettransferCredit);\n        console.log("current test case: ", BigInt(rettransferCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n        executeStatus += BigInt(rettransferCredit.receipt.status.toString());\n      }\n\n      if (count >= MAX_COUNT) {\n        throw "TIMEOUT,  too many failed test cases!";\n      }\n      let postState = await ctx.getState();\n      assert(null == postState || postState == 1, "postCondition violated: current state is " + postState);\n      // PostCondition. \n    }\n    return ret;\n  }\n  async action_expire() {\n    let ret = [];\n    if (asyncFlag) {\n      // bcos passed status:0\n      let executeStatus = BigInt(0);\n      let ctx = StateMachineCtx.getInstance();\n      let count = 0;\n      // PreCondition. \n      let preState = await ctx.getState();\n      assert(null == preState || preState == 1 || preState == 2, "preCondition violated: current state is " + preState);\n\n      let retexpireOrClearOrCloseCredit = await StateMachineCtx.getInstance().CreditController.expireOrClearOrCloseCredit({static:[{index:3, value:EXPIRE_CREDIT}]});\n      ret.push(retexpireOrClearOrCloseCredit);\n      console.log("current test case: ", BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n      executeStatus += BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString());\n      while (executeStatus != 0 && count < MAX_COUNT) {\n        count++;\n        executeStatus = BigInt(0);\n        let retexpireOrClearOrCloseCredit = await StateMachineCtx.getInstance().CreditController.expireOrClearOrCloseCredit({static:[{index:3, value:EXPIRE_CREDIT}]});\n        ret.push(retexpireOrClearOrCloseCredit);\n        console.log("current test case: ", BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n        executeStatus += BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString());\n      }\n  \n      if (count >= MAX_COUNT) {\n        throw "TIMEOUT,  too many failed test cases!";\n      }\n      let postState = await ctx.getState();\n      assert(null == postState || postState == 3 || postState == 3, "postCondition violated: current state is " + postState);\n      // PostCondition. \n    }\n    return ret;\n  }\n  async action_close() {\n    let ret = [];\n    if (asyncFlag) {\n      // bcos passed status:0\n      let executeStatus = BigInt(0);\n      let ctx = StateMachineCtx.getInstance();\n      let count = 0;\n      // PreCondition. \n      let preState = await ctx.getState();\n      assert(null == preState || preState == 1 || preState == 2, "preCondition violated: current state is " + preState);\n\n    \n      let retexpireOrClearOrCloseCredit = await StateMachineCtx.getInstance().CreditController.expireOrClearOrCloseCredit({static:[{index:3, value:CLOSE_CREDIT}]});\n      ret.push(retexpireOrClearOrCloseCredit);\n      console.log("current test case: ", BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n      executeStatus += BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString());\n      while (executeStatus != 0 && count < MAX_COUNT) {\n        count++;\n        executeStatus = BigInt(0);\n        let retexpireOrClearOrCloseCredit = await StateMachineCtx.getInstance().CreditController.expireOrClearOrCloseCredit({static:[{index:3, value:CLOSE_CREDIT}]});\n        ret.push(retexpireOrClearOrCloseCredit);\n        console.log("current test case: ", BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n        executeStatus += BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString());\n      }\n\n      if (count >= MAX_COUNT) {\n        throw "TIMEOUT,  too many failed test cases!";\n      }\n      let postState = await ctx.getState();\n      assert(null == postState || postState == 5 || postState == 5, "postCondition violated: current state is " + postState);\n      // PostCondition. \n    }\n    return ret;\n  }\n  async action_clear() {\n    let ret = [];\n    if (asyncFlag) {\n      // bcos passed status:0\n      let executeStatus = BigInt(0);\n      let ctx = StateMachineCtx.getInstance();\n      let count = 0;\n      // PreCondition. \n      let preState = await ctx.getState();\n      assert(null == preState || preState == 1 || preState == 2, "preCondition violated: current state is " + preState);\n\n      let retexpireOrClearOrCloseCredit = await StateMachineCtx.getInstance().CreditController.expireOrClearOrCloseCredit({static:[{index:3, value:CLEAR_CREDIT}]});\n      ret.push(retexpireOrClearOrCloseCredit);\n      console.log("current test case: ", BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n      executeStatus += BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString());\n      while (executeStatus != 0 && count < MAX_COUNT) {\n        count++;\n        executeStatus = BigInt(0);\n        let retexpireOrClearOrCloseCredit = await StateMachineCtx.getInstance().CreditController.expireOrClearOrCloseCredit({static:[{index:3, value:CLEAR_CREDIT}]});\n        ret.push(retexpireOrClearOrCloseCredit);\n        console.log("current test case: ", BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString()) == BigInt(0) ? "passed" : "failed");\n        executeStatus += BigInt(retexpireOrClearOrCloseCredit.receipt.status.toString());\n      }\n\n      if (count >= MAX_COUNT) {\n        throw "TIMEOUT,  too many failed test cases!";\n      }\n      let postState = await ctx.getState();\n      assert(null == postState || postState == 4 || postState == 4, "postCondition violated: current state is " + postState);\n      // PostCondition. \n    }\n    return ret;\n  }\n}\n// state machine \nconst createStateMachine = statectx => {\n  return Machine({\n    id: "FSM#1",\n    initial: "initial",\n    context: {\n      ctx: statectx\n    },\n    states: {\n\n      initial: {\n        on: {\n          create: {\n            target: "dummy_CREATED_initial",\n            actions: "action_create"\n          }\n        }\n      },\n      CREATED: {\n        on: {\n          transfer: {\n            target: "CREATED",\n            actions: "action_transfer"\n          },\n          discount: {\n            target: "DISCOUNTED",\n            actions: "action_discount"\n          },\n          expire: {\n            target: "EXPIRED",\n            actions: "action_expire"\n          },\n          clear: {\n            target: "CLEARED",\n            actions: "action_clear"\n          },\n          close: {\n            target: "CLOSED",\n            actions: "action_close"\n          }\n        }\n      },\n      DISCOUNTED: {\n        on: {\n          expire: {\n            target: "EXPIRED",\n            actions: "action_expire"\n          },\n          clear: {\n            target: "CLEARED",\n            actions: "action_clear"\n          },\n          close: {\n            target: "CLOSED",\n            actions: "action_close"\n          }\n        }\n      },\n      EXPIRED: {\n        type: "final"\n      },\n      CLEARED: {\n        type: "final"\n      },\n      CLOSED: {\n        type: "final"\n      },\n      dummy_CREATED_initial: {\n        on: {\n          transfer: {\n            target: "CREATED",\n            actions: "action_transfer"\n          }\n        }\n      }\n    }\n  }, {\n    actions: {\n      action_create: statectx.action_create,\n      action_discount: statectx.action_discount,\n      action_transfer: statectx.action_transfer,\n      action_expire: statectx.action_expire,\n      action_close: statectx.action_close,\n      action_clear: statectx.action_clear\n    }\n  });\n}\n\nmodule.exports.StateMachineCtx = StateMachineCtx;\nmodule.exports.revertAsyncFlag = revertAsyncFlag;\nmodule.exports.createStateMachine = createStateMachine;';var u=n("e552").js;class p{constructor(){this.random_test=!1}add_contracts(t){return this.contracts=t,this}enable_randomTest(){return this.random_test=!0,this.add_covering_strategy(this.strategy),this}disable_randomTest(){return this.random_test=!1,this.add_covering_strategy(this.strategy),this}get_fsm(){return this.fsm}get_stateOptions(){a()(this.fsm);let t=[];for(let e of this.fsm.states)t.push({value:e.name,text:e.name});return t}get_possible_transitions(t){a()(t);let e=[];for(let n of this.fsm.transitions)n.from==t&&e.push({text:n.to,value:""+n.action});return e}generate_dummy_loop_fsm(){let t=JSON.parse(JSON.stringify(this.fsm.states)),e=JSON.parse(JSON.stringify(this.fsm.transitions)),n=new Set,s={};for(let a of this.fsm.transitions)a.from==a.to&&(n.add(a.from),s[a.from]=a);for(let a of this.fsm.transitions)if(a.from!=a.to&&n.has(a.to))for(let n of this.fsm.states)if(n.name==a.to){let r=JSON.parse(JSON.stringify(n));r.name=`dummy_${n.name.trim()}_${a.from.trim()}`,t.push(r);for(let t of e)if(t.from==a.from&&t.to==a.to&&t.action==a.action){e.splice(e.indexOf(t),1);break}let i=JSON.parse(JSON.stringify(a));i.to=r.name;let o=JSON.parse(JSON.stringify(s[a.to]));o.from=r.name,e.push(i),e.push(o)}this.fsm.dummy_states=t,this.fsm.dummy_transitions=e}add_covering_strategy(t){this.strategy=t,this.activate_states=new Set,this.activate_transition=new Set,this.currentState=null,this.action_Report=null,this.previous_action_Report=null,this.generate_dummy_loop_fsm();for(let e of this.fsm.transitions)e.color&&(e.color="black");for(let e of this.fsm.states)e.color&&(e.color="black");return console.log(this),this}add_action_report(t){(!this.currentState||t.index&&1==t.index)&&(this.currentState=this._get_initial_state(),this.action_Report=null,this.previous_action_Report=null),this.action_Report=t,console.log(t);let e,n=this.action_Report.action,s=0;for(let a of this.fsm.transitions){if(a.from==this.currentState&&"action_"+a.action==n){a.color="red",this.currentState=a.to;break}s++}for(let a of this.fsm.states)a.name==this.currentState&&(a.color="red",e=a);return this.activate_transition.has(s)?this.isFresh_result=!1:this.isFresh_result=!0,this.activate_transition.add(s),this.activate_states.add(e),console.log(this.currentState),this}next_result(){if(!this.random_test){let t=[];for(let e=0;e<this.action_Report.index;e++){let n=this.action_Report.plan[e];t.push(n.type.split("action_")[1])}if(console.log("fresh result "+(this.isFresh_result?"yes":"no")),this.action_Report&&1==this.isFresh_result){let e={"#Strategy":this.strategy,"#States":this.currentState,"#Paths":t,"#Test Cases":this.action_Report.test_cases,"#Times(s)":(this.action_Report.currentTime-this.action_Report.startTime).toFixed(3)};return this.action_Report=null,e}return null}if(this.action_Report&&this.action_Report.action&&"string"==typeof this.action_Report.action){if(this.action_Report.action=[this.action_Report.action.split("action_")[1]],this.previous_action_Report&&(this.action_Report.action=this.previous_action_Report.action.concat(this.action_Report.action)),console.log("fresh result "+(this.isFresh_result?"yes":"no")),this.action_Report&&1==this.isFresh_result){let t={"#Strategy":"Random Test","#States":this.currentState,"#Paths":this.action_Report.action,"#Test Cases":this.action_Report.test_cases,"#Times(s)":(this.action_Report.currentTime-this.action_Report.startTime).toFixed(3)};return this.previous_action_Report=this.action_Report,this.action_Report=null,t}return this.previous_action_Report=this.action_Report,this.action_Report=null,null}return null}add_fsm(t){return this.fsm=JSON.parse(t),a()(this.fsm.id,"id error"),a()(this.fsm.states,"states error"),a()(this.fsm.transitions,"transitions error"),a()(this.fsm.actions,"actions error"),a()(this.fsm.contracts,"contracts error"),this}__get_sm_state(t){let e=[];for(let n of t)e.push({name:n.name,type:n.type,color:n.color?n.color:"black"});return e}get_sm_cat(){return console.log(JSON.stringify({states:this.fsm.states,transitions:this.fsm.transitions})),JSON.stringify({states:this.__get_sm_state(this.fsm.states),transitions:this.fsm.transitions})}_get_abi_interface(t,e,n){let s="";for(let a of n)a.name&&"function"==a.type&&a.name!=a.name.toUpperCase()&&(s+=`\n    async ${a.name}(){\n        let fuzz = await this.fuzzer.full_fuzz_fun("${t}", this.address,  "${a.name}");\n        return fuzz;\n    }\n        `);return s}_get_contract_interface(){let t="";for(let e of Object.keys(this.fsm.contracts))t+=`// contract interface \n\n    class ${e}{\n      constructor(fuzzer){\n        this.address = "${this.fsm.contracts[e].address}";\n        this.name = "${e}";\n        this.fuzzer  = fuzzer;\n      }\n      ${this._get_abi_interface(this.fsm.contracts[e].name,this.fsm.contracts[e].address,this.contracts[this.fsm.contracts[e].name])}\n    }`;return t}_get_contracts_interface_instances(){let t="";for(let e of Object.keys(this.fsm.contracts))t+=`this.${e} = new ${e}(this.fuzzer);\n`;return t}__get_action_functions(t){let e="";for(let n of Object.keys(t))for(let s of t[n])e+=`let ret${s} = await StateMachineCtx.getInstance().${n}.${s}();\n                ret.push(ret${s});\n                console.log( "current test case: ", BigInt(ret${s}.receipt.status.toString())== BigInt(${c})?"passed":"failed");\n                executeStatus += BigInt(ret${s}.receipt.status.toString());`;return e}_getPrePostPredicateForAction(t){let e=[],n=[];for(let s of this.fsm.transitions)if(t==s.action)for(let t of this.fsm.states)s.from==t.name&&t.Predicate&&e.push(t.Predicate),s.to==t.name&&t.Predicate&&n.push(t.Predicate);return this.random_test?{prePredicate:"let preState = await ctx.getState();",postPredicate:"let postState = await ctx.getState();"}:{prePredicate:`let preState = await ctx.getState();\n                assert(null==preState||${e.join("||").replace(/state/gi,"preState")}, "preCondition violated: current state is "+preState  );`,postPredicate:`let postState = await ctx.getState();\n                assert(null==postState||${n.join("||").replace(/state/gi,"postState")},  "postCondition violated: current state is "+postState );`}}_get_action_functions_mapping(){let t="";for(let e of Object.keys(this.fsm.actions)){let n=this._getPrePostPredicateForAction(e);t+=`async action_${e}(){\n                let ret = [];\n                if(asyncFlag){\n                        // bcos passed status:${c}\n                        let executeStatus = BigInt(${c});\n                        let ctx =  StateMachineCtx.getInstance();\n                        let count = 0;\n                        // PreCondition. \n                        ${n.prePredicate}\n\n                        ${this.__get_action_functions(this.fsm.actions[e])}\n                        while(executeStatus != ${c}  && count<MAX_COUNT){\n                            count ++;\n                            executeStatus = BigInt(${c});\n                            ${this.__get_action_functions(this.fsm.actions[e])}\n                        }\n\n                        if(count>=MAX_COUNT){\n                            ${this.random_test?"return ret;":'throw "TIMEOUT,  too many failed test cases!"'};\n                        }\n                        // PostCondition. \n                        ${n.postPredicate}\n                     \n                }\n                return ret;\n            }`}return t}_get_state_machine_ctx(){let t=`// state machine context\nclass StateMachineCtx{\n    constructor(fsmreplayer, fuzzer){\n        this.state = {"id": "${this.fsm.id}"};\n        this.fuzzer = fuzzer;\n        this.fsmreplayer = fsmreplayer;\n    }\n    async initialize(){\n       ${this._get_contracts_interface_instances()}\n       this.${this.fsm.target_contract}.address = await  this.fsmreplayer.initialize();\n    }\n    static getInstance(fsmreplayer, fuzzer) {\n        if (!StateMachineCtx.instance)\n            StateMachineCtx.instance = new StateMachineCtx(fsmreplayer, fuzzer);\n        return StateMachineCtx.instance;\n    }\n    async getState(){\n        //TO DO, set what your state means and how to get the state\n        if(this.${this.fsm.target_contract}.state){\n            let ret = await  this.${this.fsm.target_contract}.state();\n            console.log(ret);\n            if( ret.receipt.result)\n                    this.state = BigInt(ret.receipt.result.output.toString());\n            else\n                    this.state = BigInt(ret.receipt.toString());\n        }else if(this.${this.fsm.target_contract}.stage){\n            let ret =await  this.${this.fsm.target_contract}.stage();\n            console.log(ret);\n            if( ret.receipt.result)\n                    this.state = BigInt(ret.receipt.result.output.toString());\n            else\n                    this.state = BigInt(ret.receipt.toString());\n        }else {\n            this.state = null;\n        }\n        console.log("state:", this.state);\n        return this.state;\n    }\n    // action_functions_mapping\n    ${this._get_action_functions_mapping()}\n}`;return t}__get_xstates(){let t="",e=this.strategy==o?this.fsm.dummy_states:this.fsm.states,n=this.strategy==o?this.fsm.dummy_transitions:this.fsm.transitions;for(let s of e){let e="",a=0;for(let t of n)t.from==s.name&&(a++,e+=`\n                 ${t.action}:{\n                            target:  "${t.to}",\n                            actions: "action_${t.action}"\n                        },`);","==e.charAt(e.length-1)&&(e=e.substring(0,e.length-1)),t+=0!=a?`\n         ${s.name}:{\n                    on:{${e}\n                    }\n                },`:`\n       ${s.name}:{\n                    type: "final"\n                },`}return","==t.charAt(t.length-1)&&(t=t.substring(0,t.length-1)),t}__get_xactions(){let t="",e=[];for(let n of Object.keys(this.fsm.actions))e.push(`action_${n}:statectx.action_${n}`);return t+=`{\n${e.join(",")}\n}`,t}_get_initial_state(){for(let t of this.fsm.states)if("initial"==t.type)return t.name;a()(!1,"there must be a  initial state defined in model")}_get_state_machine(){let t=`// state machine \nconst createStateMachine = statectx =>{\n    return Machine({\n        id: "${this.fsm.id}",\n        initial: "${this._get_initial_state()}",\n        context: {\n               ctx: statectx\n        },\n        states:{\n                    ${this.__get_xstates()}\n                }\n        },{actions:${this.__get_xactions()}});\n}\n`;return t}get_model_script(){let t="",e='const assert = require("assert");\nconst hex2ascii = require(\'hex2ascii\')\nconst Machine = require("xstate").Machine;\nconst createModel = require("@xstate/test").createModel;\n\nlet asyncFlag = false;\nconst MAX_COUNT= 60;\nfunction revertAsyncFlag() {\n    asyncFlag = !asyncFlag;\n}\n\n';return t=e+"\n"+this._get_contract_interface()+"\n"+this._get_state_machine_ctx()+"\n"+this._get_state_machine()+"\nmodule.exports.StateMachineCtx = StateMachineCtx\nmodule.exports.revertAsyncFlag = revertAsyncFlag;\nmodule.exports.createStateMachine = createStateMachine","CreditController"==this.fsm.target_contract&&(this.strategy&&this.strategy!=r&&this.strategy!=i||(t=l),this.strategy==o&&(t=d)),u(t,{indent_size:2,space_in_empty_paren:!0})}to_sm_Xstate(){}}},"772e":function(t,e,n){"use strict";var s=n("1c42"),a=n.n(s);a.a},"85ec":function(t,e,n){},a4a3:function(t,e,n){},d008:function(t){t.exports=JSON.parse('{"id":"FSM#5","target_contract":"AssetTransfer","contracts":{"AssetTransfer":{"address":"0x00","name":"AssetTransfer"}},"actions":{"Terminate":{"AssetTransfer":["Terminate"]},"Modify":{"AssetTransfer":["Modify"]},"MakeOffer":{"AssetTransfer":["MakeOffer"]},"AcceptOffer":{"AssetTransfer":["AcceptOffer"]},"Reject":{"AssetTransfer":["Reject"]},"Accept":{"AssetTransfer":["Accept"]},"ModifyOffer":{"AssetTransfer":["ModifyOffer"]},"RescindOffer":{"AssetTransfer":["RescindOffer"]},"MarkAppraised":{"AssetTransfer":["MarkAppraised"]},"MarkInspected":{"AssetTransfer":["MarkInspected"]}},"states":[{"name":"Active","type":"initial","Predicate":"state==0"},{"name":"OfferPlaced","type":"regular","Predicate":"state==1"},{"name":"PendingInspection","type":"regular","Predicate":"state==2"},{"name":"Inspected","type":"regular","Predicate":"state==3"},{"name":"Appraised","type":"regular","Predicate":"state==4"},{"name":"NotionalAcceptance","type":"regular","Predicate":"state==5"},{"name":"BuyerAccepted","type":"regular","Predicate":"state==6"},{"name":"SellerAccepted","type":"regular","Predicate":"state==7"},{"name":"Accepted","type":"regular","Predicate":"state==8"},{"name":"Terminated","type":"regular","Predicate":"state==9"}],"transitions":[{"from":"Active","to":"Terminated","label":"Terminate","event":"Terminate","action":"Terminate"},{"from":"Active","to":"OfferPlaced","label":"MakeOffer","event":"MakeOffer","action":"MakeOffer"},{"from":"Active","to":"Active","label":"Modify","event":"Modify","action":"Modify"},{"from":"OfferPlaced","to":"PendingInspection","label":"AcceptOffer","event":"AcceptOffer","action":"AcceptOffer"},{"from":"OfferPlaced","to":"Active","label":"Reject","event":"Reject","action":"Reject"},{"from":"OfferPlaced","to":"Terminated","label":"Terminate","event":"Terminate","action":"Terminate"},{"from":"OfferPlaced","to":"Active","label":"RescindOffer","event":"RescindOffer","action":"RescindOffer"},{"from":"OfferPlaced","to":"OfferPlaced","label":"ModifyOffer","event":"ModifyOffer","action":"ModifyOffer"},{"from":"PendingInspection","to":"Active","label":"Reject","event":"Reject","action":"Reject"},{"from":"PendingInspection","to":"Terminated","label":"Terminate","event":"Terminate","action":"Terminate"},{"from":"PendingInspection","to":"Active","label":"RescindOffer","event":"RescindOffer","action":"RescindOffer"},{"from":"PendingInspection","to":"Inspected","label":"MarkInspected","event":"MarkInspected","action":"MarkInspected"},{"from":"PendingInspection","to":"Appraised","label":"MarkAppraised","event":"MarkAppraised","action":"MarkAppraised"},{"from":"Appraised","to":"Active","label":"Reject","event":"Reject","action":"Reject"},{"from":"Appraised","to":"Terminated","label":"Terminate","event":"Terminate","action":"Terminate"},{"from":"Appraised","to":"Active","label":"RescindOffer","event":"RescindOffer","action":"RescindOffer"},{"from":"Appraised","to":"NotionalAcceptance","label":"MarkInspected","event":"MarkInspected","action":"MarkInspected"},{"from":"NotionalAcceptance","to":"SellerAccepted","label":"Accept","event":"Accept","action":"Accept"},{"from":"NotionalAcceptance","to":"Active","label":"Reject","event":"Reject","action":"Reject"},{"from":"NotionalAcceptance","to":"BuyerAccepted","label":"Accept","event":"Accept","action":"Accept"},{"from":"NotionalAcceptance","to":"Active","label":"RescindOffer","event":"RescindOffer","action":"RescindOffer"},{"from":"BuyerAccepted","to":"SellerAccepted","label":"Accept","event":"Accept","action":"Accept"},{"from":"BuyerAccepted","to":"Active","label":"Reject","event":"Reject","action":"Reject"},{"from":"BuyerAccepted","to":"Terminated","label":"Terminate","event":"Terminate","action":"Terminate"},{"from":"SellerAccepted","to":"Accepted","label":"Accept","event":"Accept","action":"Accept"},{"from":"SellerAccepted","to":"Active","label":"RescindOffer","event":"RescindOffer","action":"RescindOffer"}]}')},e2d8:function(t){t.exports=JSON.parse('{"id":"FSM#1","target_contract":"CreditController","contracts":{"CreditController":{"address":"0xa7b692824ac1ff30f01c325ec7498005ee13e0bc","name":"CreditController"}},"actions":{"create":{"CreditController":["createCredit"]},"discount":{"CreditController":["discountCredit"]},"transfer":{"CreditController":["transferCredit"]},"expire":{"CreditController":["expireOrClearOrCloseCredit"]},"close":{"CreditController":["expireOrClearOrCloseCredit"]},"clear":{"CreditController":["expireOrClearOrCloseCredit"]}},"states":[{"name":"initial","type":"initial","Predicate":"state == 0"},{"name":"CREATED","type":"regular","Predicate":"state == 1"},{"name":"DISCOUNTED","type":"regular","Predicate":"state == 2"},{"name":"EXPIRED","type":"regular","Predicate":"state == 3"},{"name":"CLEARED","type":"regular","Predicate":"state == 4"},{"name":"CLOSED","type":"regular","Predicate":"state == 5"}],"transitions":[{"from":"initial","to":"CREATED","label":"create","event":"create","action":"create"},{"from":"CREATED","to":"CREATED","label":"transfer","event":"transfer","action":"transfer"},{"from":"CREATED","to":"DISCOUNTED","label":"discount","event":"discount","action":"discount"},{"from":"CREATED","to":"EXPIRED","label":"expire","event":"expire","action":"expire"},{"from":"CREATED","to":"CLEARED","label":"clear","event":"clear","action":"clear"},{"from":"CREATED","to":"CLOSED","label":"close","event":"close","action":"close"},{"from":"DISCOUNTED","to":"EXPIRED","label":"expire","event":"expire","action":"expire"},{"from":"DISCOUNTED","to":"CLEARED","label":"clear","event":"clear","action":"clear"},{"from":"DISCOUNTED","to":"CLOSED","label":"close","event":"close","action":"close"}]}')},faa6:function(t,e,n){"use strict";var s=n("300d"),a=n.n(s);a.a}});
//# sourceMappingURL=app.5ed15fc5.js.map